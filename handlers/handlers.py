import openai
import config as cfg
import markups as nav
import datetime
import time
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup

from aiogram.types import ContentType
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from openai.error import InvalidRequestError
from aiogram.types import ChatActions
from aiogram.utils.exceptions import CantInitiateConversation, Unauthorized, BotBlocked

from config import  bot, dp, PAYMENT_TOKEN2, PRICE_DAY, PRICE_WEEK, PRICE_MONTH, PAYMENT_TOKEN2, OPENAI_API_KEY
from db.db_operations import *

from yoomoney import Quickpay, Client
import string
import random

openai.api_key = OPENAI_API_KEY

messages={}
pinned_message_sent = {}
def update(messages,role,content):
    messages.append({"role":role, "content":content})
    return messages

async def check_sub_channels(channels, user_id):
    for channel in channels:
        chat_member = await bot.get_chat_member(chat_id=channel[1], user_id=user_id)
        if chat_member['status'] == 'left':
            return False
    return True
    
'''async def check_payment(payment, user_id):
    for payment in payment:
        pay_log= await get_payment_status(chat_id=payment[1], user_id=user_id)
        if pay_log['status'] == 'left':
            return False
    return True'''


def check_subscr_decorator(func):
    async def wrapper(*args, **kwargs):
        message: types.Message = args[0]
        if not await check_sub_channels(cfg.CHANNELS, message.from_user.id):
            try:
                await bot.send_message(message.from_user.id, cfg.NOT_SUB_MESSAGE, parse_mode = 'html', reply_markup=nav.showChannels())
            except (CantInitiateConversation, Unauthorized, BotBlocked) as ex:
                print(f"{ex} USER_ID:{message.from_user.id}")
                await update_user_active(message.from_user.id, False)
        else:
            await func(*args, **kwargs)
    return wrapper


@dp.message_handler(commands=["start"])
@check_subscr_decorator
async def start_handler(message: types.Message, **kwargs):
    id = message.from_user.id
    messages[id] = []
    if not await user_exists(message.from_user.id):
        await add_user(telegram_id=message.from_user.id, first_name=message.from_user.first_name, 
                        last_name=message.from_user.last_name, username=message.from_user.username)
    else:
        await update_user_active(message.from_user.id, True)
    await bot.send_message(message.from_user.id, text=f"–ü—Ä–∏–≤–µ—Ç, <b>–¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥</b>!\n\n–ë–æ—Ç <b>Chat GPT</b> —Ä–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è!\n\n–¢—É—Ç —Ç—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –æ–±–æ –≤—Å–µ–º –Ω–∞ —Å–≤–µ—Ç–µ, —Å—Ç–æ–∏—Ç –ª–∏—à—å —Å–ø—Ä–æ—Å–∏—Ç—å.\n\n"\
            f"<b>–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n\nüîò C –º–æ–µ–π –ø–æ–º–æ—â—å—é –±—ã–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –¥–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ü–µ–Ω–µ–Ω–∞ –Ω–∞ –≤—ã—Å—à–∏–π –±–∞–ª–ª;\n"\
            f"\nüîò –Ø —Å –ª–µ–≥–∫–æ—Å—Ç—å—é –ø—Ä–æ—à–ª–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –≤ Google –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –º–ª–∞–¥—à–µ–≥–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤ $180 —Ç—ã—Å. –≤ –≥–æ–¥. –ù–µ–ø–ª–æ—Ö–æ, –¥–∞?\n"\
            f"\nüîò –ù—É, –∏ –∫–æ–Ω–µ—á–Ω–æ –∂–µ, —è –±–µ–∑ –ø—Ä–æ–±–ª–µ–º —Å–¥–∞–ª–∞ —ç–∫–∑–∞–º–µ–Ω—ã –Ω–∞ –ú–ë–ê –≤ –ø—Ä–µ—Å—Ç–∏–∂–Ω–µ–π—à–µ–π –£–æ—Ä—Ç–æ–Ω—Å–∫–æ–π —à–∫–æ–ª–µ –±–∏–∑–Ω–µ—Å–∞ –ø—Ä–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –ü–µ–Ω—Å–∏–ª—å–≤–∞–Ω–∏–∏, –∞ –µ—â–µ –ø–æ–ª—É—á–∏–ª–∞ –ª–∏—Ü–µ–Ω–∑–∏—é –≤—Ä–∞—á–∞ –∏ —é—Ä–∏—Å—Ç–∞!\n\n"\
            f"<b>–ê —Ç–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π —Å–∞–º!</b> –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å!\n\n"\
            f"P.S. –ò–ª–∏ –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å. –ù–∞—á–Ω–µ–º?", parse_mode="html", reply_markup=nav.main_keyboard)
    

@dp.callback_query_handler(text="subchannelsdone")
async def subchannelsdone(call: types.CallbackQuery, **kwargs):
    if await check_sub_channels(cfg.CHANNELS,call.message.chat.id):
        await start_handler(call)
        print ('1')
    else:
        await bot.send_message(call.from_user.id, cfg.NOT_SUB_MESSAGE, parse_mode="html", reply_markup=nav.showChannels())
        print ('2')

@dp.message_handler(Text('–ü–û–î–ü–ò–°–ö–ê'))
@check_subscr_decorator
async def subscr_handler(message: types.message, **kwargs):
    if message.chat.type == 'private':
        if not await user_subscribed(message.from_user.id):
            await bot.send_message(message.from_user.id, text=f"–£ –í–∞—Å –µ—Å—Ç—å <b>2 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞</b> –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞. –ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å, –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ <b>–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É</b>.", parse_mode='html')
            await bot.send_message(message.from_user.id, text="<b>–í–ê–†–ò–ê–ù–¢–´ –ü–û–î–ü–ò–°–ö–ò</b>", reply_markup=nav.subscr_inline_keyboard,parse_mode='html')
        else:
            subscr_expiration = await get_user_subscr_exp(message.from_user.id)
            time_delta = subscr_expiration - datetime.datetime.now()
            days = time_delta.days
            hours = int((time_delta.total_seconds() - (days * 24 * 3600)) // 3600)
            minutes = int((time_delta.total_seconds() -  (days * 24 * 3600) - (hours * 3600 )) // 60)
            await bot.send_message(message.from_user.id, text=f"–£ –í–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –î–æ –∫–æ–Ω—Ü–∞  –æ—Å—Ç–∞–ª–æ—Å—å:\n{days}–¥–Ω. {hours}—á. {minutes}–º–∏–Ω.")



@dp.callback_query_handler(Text("subbotsdone"))
async def subbotpay(call: types.CallbackQuery, **kwargs):
    data = await get_payment_status(call.message.chat.id)
    is_subscribed = data[0][0] if data else None
    label = data[0][1] if data else None
    period = data[0][2] if data else None
    print ('7')
    if not is_subscribed:
        client = Client(cfg.PAYMENT_TOKEN2)
        history = client.operation_history(label=label)
        current_date = datetime.datetime.now()
        print ('8')
        try:
            operation = history.operations[-1]
            if operation.status == 'success':
                if period == 'day':
                    exp_date = current_date + datetime.timedelta(days=1)
                    description ="–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ 1 –¥–µ–Ω—å"
                elif period == 'week':
                    exp_date = current_date + datetime.timedelta(days=7)
                    description ="–í–∞–º –¥–æ—Å—Ç—É–ø–Ω –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ 7 –¥–Ω–µ–π"
                elif period == 'month':
                    exp_date = current_date + datetime.timedelta(days=30)
                    description ="–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ 30 –¥–Ω–µ–π"
                await set_user_subscribed(exp_date, call.message.chat.id)
                await bot.send_message(call.message.chat.id, text=f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏! {description}')
                print ('9')
        except Exception as e:
            print(e)
            await bot.send_message(call.message.chat.id, text=f"–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –æ–ø–ª–∞—Ç–∞ –µ—â–µ –≤ –ø—É—Ç–∏!. –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º —Å –æ–ø–ª–∞—Ç–æ–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É –±–æ—Ç–∞ ", reply_markup=call.message.reply_markup)      
            print ('10')                            
    else:
        subscr_expiration = await get_user_subscr_exp(call.from_user.id)
        time_delta = subscr_expiration - datetime.datetime.now()
        days = time_delta.days
        hours = int((time_delta.total_seconds() % (days * 24 * 3600)) // 3600)
        minutes = int((time_delta.total_seconds() % 3600) // 60)
        await bot.send_message(call.from_user.id, text=f"–£ –í–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –î–æ –∫–æ–Ω—Ü–∞  –æ—Å—Ç–∞–ª–æ—Å—å:\n{days}–¥–Ω. {hours}—á. {minutes}–º–∏–Ω.")


@dp.callback_query_handler(lambda call: True,)
@check_subscr_decorator
async def subscr_callback_handler(call: types.callback_query, **kwargs):
    letters_and_digits = string.ascii_lowercase + string.digits
    if call.data == 'subscr_month':
        payment_sum = 700             
        period='month' 
    elif call.data == 'subscr_week':
        payment_sum = 350 
        period = 'week'
    elif call.data == 'subscr_day':
        payment_sum = 100
        period = 'day'
        #await bot.delete_message(call.from_user.id, call.message.message_id
    
    rand_string = ''.join(random.sample(letters_and_digits, 10))
    
    
    quickpay = Quickpay(
        receiver='0000000000000',
        quickpay_form='shop',
        targets='ChatGPT',
        paymentType='SB',
        sum=payment_sum,
        label=rand_string
    )

    await update_label_period(rand_string, period, call.message.chat.id) 
    pay_keyboard = InlineKeyboardMarkup(row_width=1)
    btnPaySub = InlineKeyboardButton(text="–û–ü–õ–ê–¢–ò–¢–¨", url=quickpay.redirected_url)
    btnDonePay = InlineKeyboardButton(text="–Ø –û–ü–õ–ê–¢–ò–õ", callback_data="subbotsdone")  
    pay_keyboard.add(btnPaySub,btnDonePay)  
    await bot.send_message(call.message.chat.id, cfg.NOT_PAY_MESSAGE, parse_mode='html', reply_markup=pay_keyboard)
    print ('11')


''' if await check_payment(nav.subscr_inline_keyboard,call.chat.id):
        await start_handler(call.message)
    else:
        await bot.send_message(call.message.chat.id, cfg.NOT_PAY_MESSAGE, parse_mode="html", reply_markup=nav.showChannels())'''


"""@dp.pre_checkout_query_handler()
async def proccess_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)"""


"""@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def process_payment(message: types.Message):
    if message.successful_payment.invoice_payload == "month_sub":
        await bot.send_message(message.from_user.id, "–í—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π")
        current_date = datetime.datetime.now()
        exp_date = current_date + datetime.timedelta(days=30)
    elif message.successful_payment.invoice_payload == "week_sub":
        await bot.send_message(message.from_user.id, "–í—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 7 –¥–Ω–µ–π")
        current_date = datetime.datetime.now()
        exp_date = current_date + datetime.timedelta(days=7)  
    elif message.successful_payment.invoice_payload == "day_sub":
        await bot.send_message(message.from_user.id, "–í—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –¥–µ–Ω—å")
        current_date = datetime.datetime.now()
        exp_date = current_date + datetime.timedelta(days=1)
    await set_user_subscribed(exp_date,message.from_user.id)"""

@dp.message_handler()
@check_subscr_decorator
async def send(message: types.Message, **kwargs):
    user_message = message.text
    id = message.from_user.id
    if id not in pinned_message_sent:
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = await bot.send_message(message.from_user.id, text=f"<b>–£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!\n–î–ª—è <b>–í–∞—Å</b> –≤–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!\n\n"\
               f"–ë–æ—Ç –ø–µ—Ä–µ—à–µ–ª –Ω–∞ –≤–µ—Ä—Å–∏—é <b>GPT-4</b>, –∏ –≤ —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º —Ü–µ–Ω—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–≤—ã—Å–∏–ª–∏—Å—å!\n"\
               f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>'–ü–û–î–ü–ò–°–ö–ê'</b>\n\n"\
               f"<b>GPT-4</b> –º–æ–∂–µ—Ç —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –±–ª–∞–≥–æ–¥–∞—Ä—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–º –æ–±—â–∏–º –∑–Ω–∞–Ω–∏—è–º –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á.\n\n"\
               f"<b>–°–ø–µ—à–∏ –ø–æ–ø—Ä–æ–ø–æ–±–∞—Ç—å!</b>",parse_mode="html")
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        await bot.pin_chat_message(message.chat.id, msg.message_id, disable_notification=True)
        pinned_message_sent[id] = True

    if not await user_exists(message.from_user.id):
        await add_user(telegram_id=message.from_user.id, first_name=message.from_user.first_name, 
                        last_name=message.from_user.last_name, username=message.from_user.username)
    else:
        await update_user_active(message.from_user.id, True)
    if await user_subscribed(message.from_user.id) or (await get_user_limit(message.from_user.id) > 0):
        await bot.send_message(message.from_user.id, text="<b>–û–∂–∏–¥–∞–π—Ç–µ</b> ‚è≥", parse_mode="html")
        await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
        try:
            if id not in messages:
                messages[id] = []
            if len(messages[id]) >= 6:
                messages[id] = messages[id][-5:]
            messages[id].append({"role": "user", "content": user_message})
            messages[id].append({"role": "system", "content": "–¢—ã —á–∞—Ç-–±–æ—Ç —Å–ø–æ—Å–æ–±–Ω—ã–π –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –¥–∏—Å–∫—É—Å—Å–∏—è—Ö –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫.  –ü—Ä–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏, –≤—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã —É–ø–æ–º–∏–Ω–∞—Ç—å –µ–≥–æ –ø–æ –∏–º–µ–Ω–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è —é–∑–µ—Ä–Ω–µ–π–º."})
            messages[id].append({"role": "user", "content": f"chat: {message.chat} user: {message.from_user.first_name} message: {message.text}"})
            messages[id].append({"role": "user", "content": f"chat: {message.chat} –°–µ–π—á–∞—Å –≤—Ä–µ–º—è {time.strftime('%d/%m/%Y %H:%M:%S')} user: {message.from_user.first_name} message: {message.text}"})
            should_respond = not message.reply_to_message or message.reply_to_message.from_user.id == bot.id
            if should_respond:
                response = await openai.ChatCompletion.acreate(
                    #update(messages, "user", message.text)
                    model="gpt-3.5-turbo",
                    temperature=1,
                    messages=messages[id]
                #    user=id
                )
            """response = await openai.Completion.acreate(
                model="text-davinci-003", 
                prompt=message.text,
                temperature=0.9,
                max_tokens=4000,
                top_p=1.0,
                frequency_penalty=0.0,
                presence_penalty=0.6,
                stop=[" Human:", " AI:"]"""
         
            await message.answer(response['choices'][0]['message']['content'])     
            #await bot.send_message(message.from_user.id, reply_markup = nav.main_keyboard)
            #await message.answer(response['choices'][0]['text'],reply_markup = nav.main_keyboard)
            
            if not await user_subscribed(message.from_user.id):
                await reduce_user_limit(message.from_user.id)
                user_limit = await get_user_limit(message.from_user.id)
                await bot.send_message(message.from_user.id, text="–£ –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å <b>{0} –∑–∞–ø—Ä–æ—Å–æ–≤(–∞)</b>.".format(user_limit), parse_mode="html")

        except (CantInitiateConversation, Unauthorized, BotBlocked) as ex:
            print(f"EXCEPTION {ex} USER_ID:{message.from_user.id}")
            await update_user_active(message.from_user.id, False)
        
        except InvalidRequestError as ex:
            print(ex)
            await bot.send_message(message.from_user.id, text="–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å! –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 4—Ç—ã—Å. —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã!")
    else:
        await bot.send_message(message.from_user.id, text="<b>–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!</b> –õ–∏–º–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ —Å—É—Ç–∫–∏.", parse_mode="html")
        

def register_handlers(dp:Dispatcher):
    dp.register_message_handler(start_handler, commands=['start'])
    dp.register_message_handler(subscr_handler, Text("–ü–æ–¥–ø–∏—Å–∫–∞"))
    #dp.register_message_handler(process_payment, content_types=ContentType.SUCCESSFUL_PAYMENT)
    dp.register_message_handler(send)
    dp.register_callback_query_handler(subbotpay, text="subbotsdone")
    dp.register_callback_query_handler(subchannelsdone, Text("subchannelsdone"))
    dp.register_callback_query_handler(subscr_callback_handler)
    #dp.register_pre_checkout_query_handler(proccess_pre_checkout_query)
    
